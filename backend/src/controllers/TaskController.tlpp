#include 'tlpp-core.th'
#include 'tlpp-rest.th'

Namespace ProtheusDev.Tasks.Controller

Using Namespace ProtheusDev.Tasks.Service

Class TaskController
  Private Data oService as Object

  Public Method New() Constructor

  @Post("/v1/tasks")
  Public Method Create()

  @Get("/v1/tasks")
  Public Method List()

  @Get("/v1/tasks/:id")
  Public Method Get()

  @Delete("/v1/tasks/:id")
  Public Method Delete()

  @Put("/v1/tasks/:id")
  Public Method Update()

  @Get("/v1/tasks/reports/resume")
  Public Method Resume()

  Private Method Start()
  Private Method Destroy()
EndClass

Method New() Class TaskController
return

Method Start() Class TaskController
  ::oService := nil
  ::oService := TaskService():New()
return nil

Method Destroy() Class TaskController
  FreeObj(::oService)
return

Method Create() Class TaskController
  Local jBody     := JsonObject():New() as Json
  Local jResponse as Json
  Local jResult as Json

  jBody:FromJson(oRest:GetBodyRequest())

  ::Start()
  jResult := ::oService:CreateOrUpdate(jBody)

  If jResult['error']
    jResponse := {"status": "error", "message": jResult['message']}
    oRest:SetFault(jResponse:ToJson())
    oRest:SetStatusCode(500)
  else
    oRest:SetResponse(nil)
    oRest:SetStatusCode(201)
  endif

  ::Destroy()
  FreeObj(jBody)
  FreeObj(jResult)
  FreeObj(jResponse)

return

Method Update() Class TaskController
  Local jBody     := JsonObject():New() as Json
  Local jResponse as Json
  Local jPath as Json
  Local jResult as Json

  jBody:FromJson(oRest:GetBodyRequest())

  ::Start()
  jPath := oRest:getPathParamsRequest()

  if len(jPath["id"]) == TamSx3("Z1_CODIGO")[1]
    jResult := ::oService:CreateOrUpdate(jBody, jPath["id"])
  else
    jResult := {"error": .T., "message": "Tarefa não foi encontrada!"}
  endif

  If jResult['error']
    jResponse := {"status": "error", "message": jResult['message']}
    oRest:SetFault(jResponse:ToJson())
    oRest:SetStatusCode(500)
  else
    oRest:SetResponse(nil)
    oRest:SetStatusCode(200)
  endif

  ::Destroy()
  FreeObj(jBody)
  FreeObj(jResult)
  FreeObj(jResponse)

return

Method List() Class TaskController
  Local jResponse as Json

  ::Start()
  jResponse := ::oService:List()

  oRest:SetResponse(jResponse:ToJson())
  oRest:SetStatusCode(200)

  ::Destroy()
  FreeObj(jResponse)

return

Method Get() Class TaskController
  Local jResponse as Json
  Local jResult as Json
  Local jPath as Json

  ::Start()
  jPath := oRest:getPathParamsRequest()

  if len(jPath["id"]) == TamSx3("Z1_CODIGO")[1]
    jResult := ::oService:Get(jPath['id'])
  endif

  jResponse := iif(jResult != nil,jResult,{"status": "error", "message": "Tarefa não encontrada!"})

  if jResult != nil
    oRest:SetResponse(jResponse:ToJson())
    oRest:SetStatusCode(200)
  else
    oRest:SetFault(jResponse:ToJson())
    oRest:SetStatusCode(404)
  endif

  ::Destroy()
  FreeObj(jResponse)
  FreeObj(jResult)
  FreeObj(jPath)

return

Method Delete() Class TaskController
  Local jResponse as Json
  Local jResult as Json
  Local jPath as Json

  ::Start()
  jPath := oRest:getPathParamsRequest()

  if len(jPath["id"]) == TamSx3("Z1_CODIGO")[1]
    jResult := ::oService:Delete(jPath['id'])
  else
    jResult := {"error": .T., "message": "Tarefa não foi encontrada!"}
  endif

  if jResult["error"]
    jResponse := {"status": "error", "message": jResult["message"]}
    oRest:SetFault(jResponse:ToJson())
    oRest:SetStatusCode(404)
  else
    oRest:SetResponse(nil)
    oRest:SetStatusCode(200)
  endif

  ::Destroy()
  FreeObj(jResponse)
  FreeObj(jResult)
  FreeObj(jPath)

return

Method Resume() Class TaskController
  Local jResponse as Json

  ::Start()
  jResponse := ::oService:Resume()

  oRest:SetResponse(jResponse:ToJson())
  oRest:SetStatusCode(200)

  ::Destroy()
  FreeObj(jResponse)
return
